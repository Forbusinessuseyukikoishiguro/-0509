## 💡MENTAで学んだことまとめ（水鳥川いる先生・小笠原先生）

MENTAを通して学んだプログラミングとコンサルの視点を、忘れないように整理しました。これは自分の「思考のOS」をアップデートするためのメモでもあり、他の学習者にも役立つヒントになればと思います。

---

### 🧑‍🏫水鳥川いる先生から学んだこと（プログラミング・思考編）

#### ✅ インプットとアウトプットを意識する

* プログラムは「何を受け取って（Input）、何を返すか（Output）」の繰り返し。
* ユーザーが入力するデータ、APIが返すデータ、そのすべてを常に"入出力の視点"で見る。

#### ✅ 処理の流れを順を追って考える

* 処理はステップごとに段階的に発生する。
* 例：フォーム送信 → バリデーション → サーバ送信 → レスポンス表示

#### ✅ 企業が叶えたいこと（理念）を意識する

* 作るものは"目的の手段"。
* この企業が本当にやりたいことは何か？社会にどう貢献したいのか？を理解する。

#### ✅ お客様個人が本当に叶えたいことを考える

* 表面的な要望だけでなく、その奥にある"真のニーズ"を汲み取る。
* 例：「売上を上げたい」→ 本音は「スタッフの余裕を生みたい」「休みを取りたい」など。

---

### 👨‍🏫小笠原先生から学んだこと（プログラミング思考・分解力）

#### ✅ 処理は上から下に流れる

* コードは上から実行される。前後の依存関係を常に意識。

#### ✅ 粒度を細かく、処理を分解する

* 一つの処理も、より小さい単位にして把握する。
* 例：ログイン処理 → 入力取得 → 空チェック → API送信 → トークン保存 → リダイレクト

#### ✅ 図・メモを使って視覚化する

* フローチャート、入力/出力図などで見える化。
* 見えないままだと複雑なまま脳に残りやすい。

---

## 🧠プログラミングとコンサルのチートシート（考え方のまとめ）

| 項目   | プログラミング        | コンサルティング           |
| ---- | -------------- | ------------------ |
| 視点   | データの流れ、構造      | 顧客の課題、背景           |
| ゴール  | 正しく動くシステム      | 顧客の理想の実現           |
| 手法   | 分解、設計、実装、検証    | ヒアリング、仮説立て、提案、実行支援 |
| スタンス | 論理的に構造化        | 共感しつつ客観視           |
| 可視化  | フローチャート、コード    | 図解、マトリクス、フレームワーク   |
| 共通点  | 問題解決力・構造化・目的意識 |                    |

---

## 🖱Vue.js イベントリスナーとは？（新人エンジニア向け）

Vue.jsでイベントリスナーとは、「ユーザーの操作に反応するための仕組み」です。クリックや入力、キー操作などに応じて処理を動かすことができます。

### 🔰基本形

```vue
<template>
  <button @click="handleClick">クリックしてね</button>
</template>

<script>
export default {
  methods: {
    handleClick() {
      console.log("ボタンがクリックされました");
    }
  }
}
</script>
```

* `@click` は `v-on:click` の短縮形。
* ボタンがクリックされた時に `handleClick` メソッドが実行される。

### 📥よく使うイベントリスナー一覧

| イベント       | 内容                   |
| ---------- | -------------------- |
| `@click`   | マウスクリックされたとき         |
| `@input`   | 入力されたとき（テキストなど）      |
| `@change`  | 値が変化したとき（セレクトボックスなど） |
| `@keydown` | キーが押されたとき            |
| `@keyup`   | キーが離されたとき            |
| `@submit`  | フォームが送信されたとき         |

### 🧪イベントオブジェクトを使いたいとき

```vue
<input @keydown="handleKeydown" />

<script>
export default {
  methods: {
    handleKeydown(event) {
      console.log(event.key); // 押されたキーの名前が表示される
    }
  }
}
</script>
```

VueではHTMLに直感的にイベントをバインドできるので、初心者にも取り組みやすいです。どのイベントに反応するべきか、どんな関数を呼び出すかを意識すると、UI開発がどんどん楽しくなります。

---

## 🧾Vue.js 用語集（新人エンジニア向け）

1. **テンプレート（template）**：画面に表示されるHTML的な部分
2. **ディレクティブ**：Vueの特殊な属性（例：`v-if`、`v-for`、`v-on`）
3. **`@`記法**：`v-on:`の短縮形（例：`@click`）
4. **イベントハンドラ**：イベントが発生した時に呼ばれる関数
5. **data**：コンポーネントの状態（値）を保持する場所
6. **methods**：ユーザーの操作に対応する処理を定義する場所
7. **computed**：算出プロパティ。依存データが変わった時に再計算される
8. **props**：親コンポーネントから子へ渡す値
9. **emit**：子コンポーネントから親へイベントを伝えるときに使う関数
10. **v-model**：双方向バインディング。フォーム要素との連携に便利

---

## ✍️最後に

この学びを自分の中に落とし込んで、"実務で活かせる力"にしていきたい。そのために、"考えるクセ"を日常的に磨いていきます。

「どんなコードを書くか」だけでなく、「誰のために、何のために書くのか」を忘れない。
